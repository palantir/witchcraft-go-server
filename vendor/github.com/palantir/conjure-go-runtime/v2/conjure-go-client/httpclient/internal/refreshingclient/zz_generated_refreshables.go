// Generated by godel-refreshable-plugin: do not edit.

package refreshingclient

import (
	"net/url"

	metrics "github.com/palantir/pkg/metrics"
	refreshable "github.com/palantir/pkg/refreshable"
)

type RefreshableValidatedClientParams interface {
	refreshable.Refreshable
	CurrentValidatedClientParams() ValidatedClientParams
	MapValidatedClientParams(func(ValidatedClientParams) interface{}) refreshable.Refreshable
	SubscribeToValidatedClientParams(func(ValidatedClientParams)) (unsubscribe func())

	APIToken() refreshable.StringPtr
	Dialer() RefreshableDialerParams
	DisableMetrics() refreshable.Bool
	MaxAttempts() refreshable.IntPtr
	MetricsTags() RefreshableTags
	Retry() RefreshableRetryParams
	Timeout() refreshable.Duration
	Transport() RefreshableTransportParams
	URIs() refreshable.StringSlice
}

type RefreshingValidatedClientParams struct {
	refreshable.Refreshable
}

func NewRefreshingValidatedClientParams(in refreshable.Refreshable) RefreshingValidatedClientParams {
	return RefreshingValidatedClientParams{Refreshable: in}
}

func (r RefreshingValidatedClientParams) CurrentValidatedClientParams() ValidatedClientParams {
	return r.Current().(ValidatedClientParams)
}

func (r RefreshingValidatedClientParams) MapValidatedClientParams(mapFn func(ValidatedClientParams) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(ValidatedClientParams))
	})
}

func (r RefreshingValidatedClientParams) SubscribeToValidatedClientParams(consumer func(ValidatedClientParams)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(ValidatedClientParams))
	})
}

func (r RefreshingValidatedClientParams) APIToken() refreshable.StringPtr {
	return refreshable.NewStringPtr(r.MapValidatedClientParams(func(i ValidatedClientParams) interface{} {
		return i.APIToken
	}))
}

func (r RefreshingValidatedClientParams) Dialer() RefreshableDialerParams {
	return NewRefreshingDialerParams(r.MapValidatedClientParams(func(i ValidatedClientParams) interface{} {
		return i.Dialer
	}))
}

func (r RefreshingValidatedClientParams) DisableMetrics() refreshable.Bool {
	return refreshable.NewBool(r.MapValidatedClientParams(func(i ValidatedClientParams) interface{} {
		return i.DisableMetrics
	}))
}

func (r RefreshingValidatedClientParams) MaxAttempts() refreshable.IntPtr {
	return refreshable.NewIntPtr(r.MapValidatedClientParams(func(i ValidatedClientParams) interface{} {
		return i.MaxAttempts
	}))
}

func (r RefreshingValidatedClientParams) MetricsTags() RefreshableTags {
	return NewRefreshingTags(r.MapValidatedClientParams(func(i ValidatedClientParams) interface{} {
		return i.MetricsTags
	}))
}

func (r RefreshingValidatedClientParams) Retry() RefreshableRetryParams {
	return NewRefreshingRetryParams(r.MapValidatedClientParams(func(i ValidatedClientParams) interface{} {
		return i.Retry
	}))
}

func (r RefreshingValidatedClientParams) Timeout() refreshable.Duration {
	return refreshable.NewDuration(r.MapValidatedClientParams(func(i ValidatedClientParams) interface{} {
		return i.Timeout
	}))
}

func (r RefreshingValidatedClientParams) Transport() RefreshableTransportParams {
	return NewRefreshingTransportParams(r.MapValidatedClientParams(func(i ValidatedClientParams) interface{} {
		return i.Transport
	}))
}

func (r RefreshingValidatedClientParams) URIs() refreshable.StringSlice {
	return refreshable.NewStringSlice(r.MapValidatedClientParams(func(i ValidatedClientParams) interface{} {
		return i.URIs
	}))
}

type RefreshableDialerParams interface {
	refreshable.Refreshable
	CurrentDialerParams() DialerParams
	MapDialerParams(func(DialerParams) interface{}) refreshable.Refreshable
	SubscribeToDialerParams(func(DialerParams)) (unsubscribe func())

	DialTimeout() refreshable.Duration
	KeepAlive() refreshable.Duration
	SocksProxyURL() RefreshableURLPtr
}

type RefreshingDialerParams struct {
	refreshable.Refreshable
}

func NewRefreshingDialerParams(in refreshable.Refreshable) RefreshingDialerParams {
	return RefreshingDialerParams{Refreshable: in}
}

func (r RefreshingDialerParams) CurrentDialerParams() DialerParams {
	return r.Current().(DialerParams)
}

func (r RefreshingDialerParams) MapDialerParams(mapFn func(DialerParams) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(DialerParams))
	})
}

func (r RefreshingDialerParams) SubscribeToDialerParams(consumer func(DialerParams)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(DialerParams))
	})
}

func (r RefreshingDialerParams) DialTimeout() refreshable.Duration {
	return refreshable.NewDuration(r.MapDialerParams(func(i DialerParams) interface{} {
		return i.DialTimeout
	}))
}

func (r RefreshingDialerParams) KeepAlive() refreshable.Duration {
	return refreshable.NewDuration(r.MapDialerParams(func(i DialerParams) interface{} {
		return i.KeepAlive
	}))
}

func (r RefreshingDialerParams) SocksProxyURL() RefreshableURLPtr {
	return NewRefreshingURLPtr(r.MapDialerParams(func(i DialerParams) interface{} {
		return i.SocksProxyURL
	}))
}

type RefreshableURLPtr interface {
	refreshable.Refreshable
	CurrentURLPtr() *url.URL
	MapURLPtr(func(*url.URL) interface{}) refreshable.Refreshable
	SubscribeToURLPtr(func(*url.URL)) (unsubscribe func())

	Scheme() refreshable.String
	Opaque() refreshable.String
	User() RefreshableUserinfoPtr
	Host() refreshable.String
	Path() refreshable.String
	RawPath() refreshable.String
	ForceQuery() refreshable.Bool
	RawQuery() refreshable.String
	Fragment() refreshable.String
	RawFragment() refreshable.String
}

type RefreshingURLPtr struct {
	refreshable.Refreshable
}

func NewRefreshingURLPtr(in refreshable.Refreshable) RefreshingURLPtr {
	return RefreshingURLPtr{Refreshable: in}
}

func (r RefreshingURLPtr) CurrentURLPtr() *url.URL {
	return r.Current().(*url.URL)
}

func (r RefreshingURLPtr) MapURLPtr(mapFn func(*url.URL) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(*url.URL))
	})
}

func (r RefreshingURLPtr) SubscribeToURLPtr(consumer func(*url.URL)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(*url.URL))
	})
}

func (r RefreshingURLPtr) Scheme() refreshable.String {
	return refreshable.NewString(r.MapURLPtr(func(i *url.URL) interface{} {
		return i.Scheme
	}))
}

func (r RefreshingURLPtr) Opaque() refreshable.String {
	return refreshable.NewString(r.MapURLPtr(func(i *url.URL) interface{} {
		return i.Opaque
	}))
}

func (r RefreshingURLPtr) User() RefreshableUserinfoPtr {
	return NewRefreshingUserinfoPtr(r.MapURLPtr(func(i *url.URL) interface{} {
		return i.User
	}))
}

func (r RefreshingURLPtr) Host() refreshable.String {
	return refreshable.NewString(r.MapURLPtr(func(i *url.URL) interface{} {
		return i.Host
	}))
}

func (r RefreshingURLPtr) Path() refreshable.String {
	return refreshable.NewString(r.MapURLPtr(func(i *url.URL) interface{} {
		return i.Path
	}))
}

func (r RefreshingURLPtr) RawPath() refreshable.String {
	return refreshable.NewString(r.MapURLPtr(func(i *url.URL) interface{} {
		return i.RawPath
	}))
}

func (r RefreshingURLPtr) ForceQuery() refreshable.Bool {
	return refreshable.NewBool(r.MapURLPtr(func(i *url.URL) interface{} {
		return i.ForceQuery
	}))
}

func (r RefreshingURLPtr) RawQuery() refreshable.String {
	return refreshable.NewString(r.MapURLPtr(func(i *url.URL) interface{} {
		return i.RawQuery
	}))
}

func (r RefreshingURLPtr) Fragment() refreshable.String {
	return refreshable.NewString(r.MapURLPtr(func(i *url.URL) interface{} {
		return i.Fragment
	}))
}

func (r RefreshingURLPtr) RawFragment() refreshable.String {
	return refreshable.NewString(r.MapURLPtr(func(i *url.URL) interface{} {
		return i.RawFragment
	}))
}

type RefreshableURL interface {
	refreshable.Refreshable
	CurrentURL() url.URL
	MapURL(func(url.URL) interface{}) refreshable.Refreshable
	SubscribeToURL(func(url.URL)) (unsubscribe func())

	Scheme() refreshable.String
	Opaque() refreshable.String
	User() RefreshableUserinfoPtr
	Host() refreshable.String
	Path() refreshable.String
	RawPath() refreshable.String
	ForceQuery() refreshable.Bool
	RawQuery() refreshable.String
	Fragment() refreshable.String
	RawFragment() refreshable.String
}

type RefreshingURL struct {
	refreshable.Refreshable
}

func NewRefreshingURL(in refreshable.Refreshable) RefreshingURL {
	return RefreshingURL{Refreshable: in}
}

func (r RefreshingURL) CurrentURL() url.URL {
	return r.Current().(url.URL)
}

func (r RefreshingURL) MapURL(mapFn func(url.URL) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(url.URL))
	})
}

func (r RefreshingURL) SubscribeToURL(consumer func(url.URL)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(url.URL))
	})
}

func (r RefreshingURL) Scheme() refreshable.String {
	return refreshable.NewString(r.MapURL(func(i url.URL) interface{} {
		return i.Scheme
	}))
}

func (r RefreshingURL) Opaque() refreshable.String {
	return refreshable.NewString(r.MapURL(func(i url.URL) interface{} {
		return i.Opaque
	}))
}

func (r RefreshingURL) User() RefreshableUserinfoPtr {
	return NewRefreshingUserinfoPtr(r.MapURL(func(i url.URL) interface{} {
		return i.User
	}))
}

func (r RefreshingURL) Host() refreshable.String {
	return refreshable.NewString(r.MapURL(func(i url.URL) interface{} {
		return i.Host
	}))
}

func (r RefreshingURL) Path() refreshable.String {
	return refreshable.NewString(r.MapURL(func(i url.URL) interface{} {
		return i.Path
	}))
}

func (r RefreshingURL) RawPath() refreshable.String {
	return refreshable.NewString(r.MapURL(func(i url.URL) interface{} {
		return i.RawPath
	}))
}

func (r RefreshingURL) ForceQuery() refreshable.Bool {
	return refreshable.NewBool(r.MapURL(func(i url.URL) interface{} {
		return i.ForceQuery
	}))
}

func (r RefreshingURL) RawQuery() refreshable.String {
	return refreshable.NewString(r.MapURL(func(i url.URL) interface{} {
		return i.RawQuery
	}))
}

func (r RefreshingURL) Fragment() refreshable.String {
	return refreshable.NewString(r.MapURL(func(i url.URL) interface{} {
		return i.Fragment
	}))
}

func (r RefreshingURL) RawFragment() refreshable.String {
	return refreshable.NewString(r.MapURL(func(i url.URL) interface{} {
		return i.RawFragment
	}))
}

type RefreshableUserinfoPtr interface {
	refreshable.Refreshable
	CurrentUserinfoPtr() *url.Userinfo
	MapUserinfoPtr(func(*url.Userinfo) interface{}) refreshable.Refreshable
	SubscribeToUserinfoPtr(func(*url.Userinfo)) (unsubscribe func())
}

type RefreshingUserinfoPtr struct {
	refreshable.Refreshable
}

func NewRefreshingUserinfoPtr(in refreshable.Refreshable) RefreshingUserinfoPtr {
	return RefreshingUserinfoPtr{Refreshable: in}
}

func (r RefreshingUserinfoPtr) CurrentUserinfoPtr() *url.Userinfo {
	return r.Current().(*url.Userinfo)
}

func (r RefreshingUserinfoPtr) MapUserinfoPtr(mapFn func(*url.Userinfo) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(*url.Userinfo))
	})
}

func (r RefreshingUserinfoPtr) SubscribeToUserinfoPtr(consumer func(*url.Userinfo)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(*url.Userinfo))
	})
}

type RefreshableUserinfo interface {
	refreshable.Refreshable
	CurrentUserinfo() url.Userinfo
	MapUserinfo(func(url.Userinfo) interface{}) refreshable.Refreshable
	SubscribeToUserinfo(func(url.Userinfo)) (unsubscribe func())
}

type RefreshingUserinfo struct {
	refreshable.Refreshable
}

func NewRefreshingUserinfo(in refreshable.Refreshable) RefreshingUserinfo {
	return RefreshingUserinfo{Refreshable: in}
}

func (r RefreshingUserinfo) CurrentUserinfo() url.Userinfo {
	return r.Current().(url.Userinfo)
}

func (r RefreshingUserinfo) MapUserinfo(mapFn func(url.Userinfo) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(url.Userinfo))
	})
}

func (r RefreshingUserinfo) SubscribeToUserinfo(consumer func(url.Userinfo)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(url.Userinfo))
	})
}

type RefreshableTags interface {
	refreshable.Refreshable
	CurrentTags() metrics.Tags
	MapTags(func(metrics.Tags) interface{}) refreshable.Refreshable
	SubscribeToTags(func(metrics.Tags)) (unsubscribe func())
}

type RefreshingTags struct {
	refreshable.Refreshable
}

func NewRefreshingTags(in refreshable.Refreshable) RefreshingTags {
	return RefreshingTags{Refreshable: in}
}

func (r RefreshingTags) CurrentTags() metrics.Tags {
	return r.Current().(metrics.Tags)
}

func (r RefreshingTags) MapTags(mapFn func(metrics.Tags) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(metrics.Tags))
	})
}

func (r RefreshingTags) SubscribeToTags(consumer func(metrics.Tags)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(metrics.Tags))
	})
}

type RefreshableTagSlice interface {
	refreshable.Refreshable
	CurrentTagSlice() []metrics.Tag
	MapTagSlice(func([]metrics.Tag) interface{}) refreshable.Refreshable
	SubscribeToTagSlice(func([]metrics.Tag)) (unsubscribe func())
}

type RefreshingTagSlice struct {
	refreshable.Refreshable
}

func NewRefreshingTagSlice(in refreshable.Refreshable) RefreshingTagSlice {
	return RefreshingTagSlice{Refreshable: in}
}

func (r RefreshingTagSlice) CurrentTagSlice() []metrics.Tag {
	return r.Current().([]metrics.Tag)
}

func (r RefreshingTagSlice) MapTagSlice(mapFn func([]metrics.Tag) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.([]metrics.Tag))
	})
}

func (r RefreshingTagSlice) SubscribeToTagSlice(consumer func([]metrics.Tag)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.([]metrics.Tag))
	})
}

type RefreshableTag interface {
	refreshable.Refreshable
	CurrentTag() metrics.Tag
	MapTag(func(metrics.Tag) interface{}) refreshable.Refreshable
	SubscribeToTag(func(metrics.Tag)) (unsubscribe func())
}

type RefreshingTag struct {
	refreshable.Refreshable
}

func NewRefreshingTag(in refreshable.Refreshable) RefreshingTag {
	return RefreshingTag{Refreshable: in}
}

func (r RefreshingTag) CurrentTag() metrics.Tag {
	return r.Current().(metrics.Tag)
}

func (r RefreshingTag) MapTag(mapFn func(metrics.Tag) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(metrics.Tag))
	})
}

func (r RefreshingTag) SubscribeToTag(consumer func(metrics.Tag)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(metrics.Tag))
	})
}

type RefreshableRetryParams interface {
	refreshable.Refreshable
	CurrentRetryParams() RetryParams
	MapRetryParams(func(RetryParams) interface{}) refreshable.Refreshable
	SubscribeToRetryParams(func(RetryParams)) (unsubscribe func())

	InitialBackoff() refreshable.Duration
	MaxBackoff() refreshable.Duration
}

type RefreshingRetryParams struct {
	refreshable.Refreshable
}

func NewRefreshingRetryParams(in refreshable.Refreshable) RefreshingRetryParams {
	return RefreshingRetryParams{Refreshable: in}
}

func (r RefreshingRetryParams) CurrentRetryParams() RetryParams {
	return r.Current().(RetryParams)
}

func (r RefreshingRetryParams) MapRetryParams(mapFn func(RetryParams) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(RetryParams))
	})
}

func (r RefreshingRetryParams) SubscribeToRetryParams(consumer func(RetryParams)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(RetryParams))
	})
}

func (r RefreshingRetryParams) InitialBackoff() refreshable.Duration {
	return refreshable.NewDuration(r.MapRetryParams(func(i RetryParams) interface{} {
		return i.InitialBackoff
	}))
}

func (r RefreshingRetryParams) MaxBackoff() refreshable.Duration {
	return refreshable.NewDuration(r.MapRetryParams(func(i RetryParams) interface{} {
		return i.MaxBackoff
	}))
}

type RefreshableTransportParams interface {
	refreshable.Refreshable
	CurrentTransportParams() TransportParams
	MapTransportParams(func(TransportParams) interface{}) refreshable.Refreshable
	SubscribeToTransportParams(func(TransportParams)) (unsubscribe func())

	MaxIdleConns() refreshable.Int
	MaxIdleConnsPerHost() refreshable.Int
	DisableHTTP2() refreshable.Bool
	DisableKeepAlives() refreshable.Bool
	IdleConnTimeout() refreshable.Duration
	ExpectContinueTimeout() refreshable.Duration
	ResponseHeaderTimeout() refreshable.Duration
	TLSHandshakeTimeout() refreshable.Duration
	HTTPProxyURL() RefreshableURLPtr
	ProxyFromEnvironment() refreshable.Bool
	HTTP2ReadIdleTimeout() refreshable.Duration
	HTTP2PingTimeout() refreshable.Duration
}

type RefreshingTransportParams struct {
	refreshable.Refreshable
}

func NewRefreshingTransportParams(in refreshable.Refreshable) RefreshingTransportParams {
	return RefreshingTransportParams{Refreshable: in}
}

func (r RefreshingTransportParams) CurrentTransportParams() TransportParams {
	return r.Current().(TransportParams)
}

func (r RefreshingTransportParams) MapTransportParams(mapFn func(TransportParams) interface{}) refreshable.Refreshable {
	return r.Map(func(i interface{}) interface{} {
		return mapFn(i.(TransportParams))
	})
}

func (r RefreshingTransportParams) SubscribeToTransportParams(consumer func(TransportParams)) (unsubscribe func()) {
	return r.Subscribe(func(i interface{}) {
		consumer(i.(TransportParams))
	})
}

func (r RefreshingTransportParams) MaxIdleConns() refreshable.Int {
	return refreshable.NewInt(r.MapTransportParams(func(i TransportParams) interface{} {
		return i.MaxIdleConns
	}))
}

func (r RefreshingTransportParams) MaxIdleConnsPerHost() refreshable.Int {
	return refreshable.NewInt(r.MapTransportParams(func(i TransportParams) interface{} {
		return i.MaxIdleConnsPerHost
	}))
}

func (r RefreshingTransportParams) DisableHTTP2() refreshable.Bool {
	return refreshable.NewBool(r.MapTransportParams(func(i TransportParams) interface{} {
		return i.DisableHTTP2
	}))
}

func (r RefreshingTransportParams) DisableKeepAlives() refreshable.Bool {
	return refreshable.NewBool(r.MapTransportParams(func(i TransportParams) interface{} {
		return i.DisableKeepAlives
	}))
}

func (r RefreshingTransportParams) IdleConnTimeout() refreshable.Duration {
	return refreshable.NewDuration(r.MapTransportParams(func(i TransportParams) interface{} {
		return i.IdleConnTimeout
	}))
}

func (r RefreshingTransportParams) ExpectContinueTimeout() refreshable.Duration {
	return refreshable.NewDuration(r.MapTransportParams(func(i TransportParams) interface{} {
		return i.ExpectContinueTimeout
	}))
}

func (r RefreshingTransportParams) ResponseHeaderTimeout() refreshable.Duration {
	return refreshable.NewDuration(r.MapTransportParams(func(i TransportParams) interface{} {
		return i.ResponseHeaderTimeout
	}))
}

func (r RefreshingTransportParams) TLSHandshakeTimeout() refreshable.Duration {
	return refreshable.NewDuration(r.MapTransportParams(func(i TransportParams) interface{} {
		return i.TLSHandshakeTimeout
	}))
}

func (r RefreshingTransportParams) HTTPProxyURL() RefreshableURLPtr {
	return NewRefreshingURLPtr(r.MapTransportParams(func(i TransportParams) interface{} {
		return i.HTTPProxyURL
	}))
}

func (r RefreshingTransportParams) ProxyFromEnvironment() refreshable.Bool {
	return refreshable.NewBool(r.MapTransportParams(func(i TransportParams) interface{} {
		return i.ProxyFromEnvironment
	}))
}

func (r RefreshingTransportParams) HTTP2ReadIdleTimeout() refreshable.Duration {
	return refreshable.NewDuration(r.MapTransportParams(func(i TransportParams) interface{} {
		return i.HTTP2ReadIdleTimeout
	}))
}

func (r RefreshingTransportParams) HTTP2PingTimeout() refreshable.Duration {
	return refreshable.NewDuration(r.MapTransportParams(func(i TransportParams) interface{} {
		return i.HTTP2PingTimeout
	}))
}
