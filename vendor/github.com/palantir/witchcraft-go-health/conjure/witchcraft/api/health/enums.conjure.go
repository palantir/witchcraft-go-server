// This file was generated by Conjure and should not be manually edited.

package health

import (
	"strings"
)

type HealthState struct {
	val HealthState_Value
}

type HealthState_Value string

const (
	// The service node is fully operational with no issues.
	HealthState_HEALTHY HealthState_Value = "HEALTHY"
	// The service node is fully operational with no issues; however, it is requesting to defer shutdown or restart. A deferring node should not accept "new" jobs but should allow polling of existing jobs.
	HealthState_DEFERRING HealthState_Value = "DEFERRING"
	// The service node is no longer serving requests and is ready to be shut down. Nodes in a deferring state are expected to change to a suspended state once they have completed any pending work. A suspended node must also indicate in its readiness probe that it should not receive incoming requests.
	HealthState_SUSPENDED HealthState_Value = "SUSPENDED"
	// The service node is operating in a degraded state, but is capable of automatically recovering. If any of the nodes in the service were to be restarted, it may result in correctness or consistency issues with the service. Ex: When a cassandra node decides it is not up-to-date and needs to repair, the node is operating in a degraded state. Restarting the node prior to the repair being complete might result in the service being unable to correctly respond to requests.
	HealthState_REPAIRING HealthState_Value = "REPAIRING"
	// The service node is in a state that is trending towards an error. If no corrective action is taken, the health is expected to become an error.
	HealthState_WARNING HealthState_Value = "WARNING"
	// The service node is operationally unhealthy.
	HealthState_ERROR HealthState_Value = "ERROR"
	// The service node has entered an unrecoverable state. All nodes of the service should be stopped and no automated attempt to restart the node should be made. Ex: a service fails to migrate to a new schema and is left in an unrecoverable state.
	HealthState_TERMINAL HealthState_Value = "TERMINAL"
	HealthState_UNKNOWN  HealthState_Value = "UNKNOWN"
)

// HealthState_Values returns all known variants of HealthState.
func HealthState_Values() []HealthState_Value {
	return []HealthState_Value{HealthState_HEALTHY, HealthState_DEFERRING, HealthState_SUSPENDED, HealthState_REPAIRING, HealthState_WARNING, HealthState_ERROR, HealthState_TERMINAL}
}

func New_HealthState(value HealthState_Value) HealthState {
	return HealthState{val: value}
}

// IsUnknown returns false for all known variants of HealthState and true otherwise.
func (e HealthState) IsUnknown() bool {
	switch e.val {
	case HealthState_HEALTHY, HealthState_DEFERRING, HealthState_SUSPENDED, HealthState_REPAIRING, HealthState_WARNING, HealthState_ERROR, HealthState_TERMINAL:
		return false
	}
	return true
}

func (e HealthState) Value() HealthState_Value {
	if e.IsUnknown() {
		return HealthState_UNKNOWN
	}
	return e.val
}

func (e HealthState) String() string {
	return string(e.val)
}

func (e HealthState) MarshalText() ([]byte, error) {
	return []byte(e.val), nil
}

func (e *HealthState) UnmarshalText(data []byte) error {
	switch v := strings.ToUpper(string(data)); v {
	default:
		*e = New_HealthState(HealthState_Value(v))
	case "HEALTHY":
		*e = New_HealthState(HealthState_HEALTHY)
	case "DEFERRING":
		*e = New_HealthState(HealthState_DEFERRING)
	case "SUSPENDED":
		*e = New_HealthState(HealthState_SUSPENDED)
	case "REPAIRING":
		*e = New_HealthState(HealthState_REPAIRING)
	case "WARNING":
		*e = New_HealthState(HealthState_WARNING)
	case "ERROR":
		*e = New_HealthState(HealthState_ERROR)
	case "TERMINAL":
		*e = New_HealthState(HealthState_TERMINAL)
	}
	return nil
}
